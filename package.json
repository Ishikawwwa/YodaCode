{
  "name": "yacor-code-reviewer",
  "displayName": "YACOR - Yet Another COde Reviewer",
  "description": "YACOR: Yet Another COde Reviewer. AI-powered code review and best practices for Python, JavaScript, TypeScript, Java, C#, and C++.",
  "version": "1.1.0",
  "publisher": "your-company",
  "icon": "YACOR_icon.png",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Linters",
    "Other"
  ],
  "keywords": [
    "yacor",
    "code review",
    "ai",
    "python",
    "javascript",
    "typescript",
    "java",
    "c#",
    "c++",
    "linter",
    "best practices"
  ],
  "activationEvents": [
    "onLanguage:python",
    "onLanguage:javascript",
    "onLanguage:typescript",
    "onLanguage:java",
    "onLanguage:csharp",
    "onLanguage:cpp"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "yacor.analyzeFile",
        "title": "YACOR: Analyze Current File",
        "icon": "$(search)"
      },
      {
        "command": "yacor.analyzeWorkspace",
        "title": "YACOR: Analyze All Files",
        "icon": "$(folder)"
      },
      {
        "command": "yacor.configureBestPractices",
        "title": "YACOR: Configure Best Practices",
        "icon": "$(settings-gear)"
      },
      {
        "command": "yacor.configureApiKey",
        "title": "YACOR: Setup GigaChat API Key",
        "icon": "$(key)"
      },
      {
        "command": "yacor.showSetupWizard",
        "title": "YACOR: Setup Wizard",
        "icon": "$(wand)"
      },
      {
        "command": "yacor.analyzeCrossFile",
        "title": "YACOR: Cross-File Analysis",
        "icon": "$(files)"
      },
      {
        "command": "yacor.selectModel",
        "title": "YACOR: Select GigaChat Model",
        "icon": "$(robot)"
      },
      {
        "command": "yacor.refreshModels",
        "title": "YACOR: Refresh Available Models",
        "icon": "$(refresh)"
      },
      {
        "command": "yacor.showCurrentModel",
        "title": "YACOR: Show Current Model",
        "icon": "$(info)"
      },
      {
        "command": "yacor.configureCertificateAuth",
        "title": "YACOR: Configure Certificate Authentication",
        "icon": "$(file-certificate)"
      },
      {
        "command": "yacor.testConnection",
        "title": "YACOR: Test GigaChat Connection",
        "icon": "$(plug)"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "yacor.analyzeFile",
          "when": "resourceExtname =~ /\\.(py|js|ts|java|cs|cpp|c)$/",
          "group": "yacor"
        }
      ],
      "editor/context": [
        {
          "command": "yacor.analyzeFile",
          "when": "editorLangId =~ /(python|javascript|typescript|java|csharp|cpp)/",
          "group": "yacor"
        }
      ],
      "commandPalette": [
        {
          "command": "yacor.analyzeFile",
          "when": "editorIsOpen"
        },
        {
          "command": "yacor.analyzeWorkspace"
        },
        {
          "command": "yacor.configureBestPractices"
        },
        {
          "command": "yacor.configureApiKey"
        },
        {
          "command": "yacor.showSetupWizard"
        },
        {
          "command": "yacor.analyzeCrossFile"
        },
        {
          "command": "yacor.selectModel"
        },
        {
          "command": "yacor.refreshModels"
        },
        {
          "command": "yacor.showCurrentModel"
        }
      ]
    },
    "configuration": {
      "title": "YACOR Code Reviewer",
      "properties": {
        "yacor.gigachat.apiKey": {
          "type": "string",
          "default": "",
          "description": "üîë GigaChat Client Secret Key (in Base64 format). Get yours at https://developers.sber.ru/studio",
          "scope": "application",
          "order": 0
        },
        "yacor.setup.completed": {
          "type": "boolean",
          "default": false,
          "description": "Internal flag to track if initial setup is completed",
          "scope": "application"
        },
        "yacor.gigachat.baseUrl": {
          "type": "string",
          "default": "",
          "description": "üåê Custom GigaChat API base URL (leave empty for default). Example: https://gigachat.devices.sberbank.ru/api/v1",
          "scope": "application",
          "order": 1
        },
        "yacor.gigachat.authMethod": {
          "type": "string",
          "default": "apiKey",
          "enum": ["apiKey", "certificate"],
          "enumDescriptions": [
            "Use API Key (Client Secret Key) for authentication",
            "Use client certificate for authentication"
          ],
          "description": "üîê Authentication method to use with GigaChat API",
          "scope": "application",
          "order": 2
        },
        "yacor.gigachat.certificatePath": {
          "type": "string",
          "default": "",
          "description": "üìÑ Path to client certificate file (.crt or .pem) for certificate authentication",
          "scope": "application",
          "order": 3
        },
        "yacor.gigachat.privateKeyPath": {
          "type": "string",
          "default": "",
          "description": "üîë Path to private key file (.key or .pem) for certificate authentication", 
          "scope": "application",
          "order": 4
        },
        "yacor.gigachat.certificatePassphrase": {
          "type": "string",
          "default": "",
          "description": "üîí Passphrase for the private key (optional, leave empty if not needed)",
          "scope": "application",
          "order": 5
        },
        "yacor.gigachat.ignoreSSLErrors": {
          "type": "boolean",
          "default": true,
          "description": "üîí Ignore SSL certificate errors when connecting to GigaChat (recommended for Russian certificates)",
          "scope": "application",
          "order": 2
        },
        "yacor.gigachat.model": {
          "type": "string",
          "default": "GigaChat:latest",
          "description": "ü§ñ GigaChat model to use for code analysis",
          "scope": "machine-overridable",
          "order": 3
        },
        "yacor.gigachat.availableModels": {
          "type": "array",
          "default": ["GigaChat:latest", "GigaChat-Pro", "GigaChat-Plus"],
          "description": "üìã List of available GigaChat models (automatically updated)",
          "scope": "application"
        },
        "yacor.autoAnalyze": {
          "type": "boolean",
          "default": true,
          "description": "Automatically analyze files when they are saved",
          "scope": "resource"
        },
        "yacor.bestPractices": {
          "type": "object",
          "default": {
            "general": [
              "Use meaningful variable and function names",
              "Keep functions small and focused (max 20-30 lines)",
              "Add proper error handling and logging",
              "Include comprehensive documentation and comments",
              "Follow consistent code formatting and style",
              "Avoid code duplication (DRY principle)",
              "Use descriptive commit messages",
              "Handle edge cases and validate inputs",
              "Write unit tests for critical functionality",
              "Use constants for magic numbers and strings"
            ],
            "python": [
              "Follow PEP 8 style guidelines strictly",
              "Use type hints for all function parameters and return values",
              "Handle exceptions properly with specific exception types",
              "Use list/dict comprehensions when appropriate",
              "Prefer f-strings over .format() or % formatting",
              "Use pathlib instead of os.path for file operations",
              "Follow proper import organization (stdlib, third-party, local)",
              "Use dataclasses or Pydantic models for data structures",
              "Implement proper logging instead of print statements",
              "Use context managers (with statements) for resource handling",
              "Follow naming conventions: snake_case for variables/functions, PascalCase for classes",
              "Add docstrings to all modules, classes, and functions",
              "Keep line length under 88 characters (Black formatter standard)",
              "Use virtual environments and requirements.txt",
              "Prefer explicit code over implicit (Zen of Python)",
              "Use early returns to reduce nesting"
            ],
            "javascript": [
              "Use const/let instead of var for variable declarations",
              "Prefer arrow functions for callbacks and short functions",
              "Use async/await instead of Promise chains when possible",
              "Use template literals instead of string concatenation",
              "Implement proper error handling with try/catch",
              "Use strict equality (===) instead of loose equality (==)",
              "Avoid global variables and use modules",
              "Use meaningful variable and function names",
              "Handle null/undefined values properly",
              "Use JSDoc comments for function documentation",
              "Follow consistent naming conventions (camelCase)",
              "Use modern ES6+ features appropriately",
              "Avoid deeply nested callbacks (callback hell)",
              "Use Array methods (map, filter, reduce) instead of loops when appropriate",
              "Implement proper event handling and cleanup"
            ],
            "typescript": [
              "Define explicit types for all variables and function parameters",
              "Use interfaces for object shapes and contracts",
              "Avoid 'any' type unless absolutely necessary",
              "Use union types instead of any when possible",
              "Implement proper generic constraints",
              "Use enums for related constants",
              "Enable strict TypeScript compiler options",
              "Use type guards for runtime type checking",
              "Prefer readonly properties when data shouldn't change",
              "Use utility types (Partial, Pick, Omit) appropriately",
              "Create custom type definitions for external libraries",
              "Use discriminated unions for complex state management",
              "Implement proper error handling with typed exceptions",
              "Use namespace or module declarations appropriately"
            ],
            "java": [
              "Follow Java naming conventions (camelCase, PascalCase)",
              "Use proper access modifiers (private, protected, public)",
              "Implement proper exception handling with specific exception types",
              "Use interfaces to define contracts",
              "Follow SOLID principles for class design",
              "Use StringBuilder for string concatenation in loops",
              "Implement proper equals() and hashCode() methods",
              "Use generics to ensure type safety",
              "Close resources properly (try-with-resources)",
              "Use static methods appropriately",
              "Follow package naming conventions",
              "Use final keyword for immutable variables",
              "Implement proper logging with frameworks like SLF4J",
              "Use annotations (@Override, @Deprecated) appropriately",
              "Follow Google Java Style Guide formatting"
            ],
            "csharp": [
              "Follow C# naming conventions (PascalCase for public, camelCase for private)",
              "Use proper access modifiers and encapsulation",
              "Implement IDisposable for resource management",
              "Use using statements for automatic resource disposal",
              "Prefer properties over public fields",
              "Use nullable reference types in C# 8+",
              "Implement proper exception handling with specific exception types",
              "Use LINQ methods appropriately",
              "Follow async/await patterns correctly",
              "Use var keyword when type is obvious",
              "Implement proper ToString(), Equals(), and GetHashCode() methods",
              "Use dependency injection for better testability",
              "Follow Microsoft C# Coding Conventions",
              "Use XML documentation comments for public APIs",
              "Prefer composition over inheritance"
            ],
            "cpp": [
              "Use RAII (Resource Acquisition Is Initialization) principle",
              "Prefer smart pointers (unique_ptr, shared_ptr) over raw pointers",
              "Use const correctness throughout the code",
              "Follow naming conventions (snake_case or camelCase consistently)",
              "Use range-based for loops when appropriate",
              "Implement proper copy constructors and assignment operators",
              "Use override keyword for virtual function overrides",
              "Prefer std::array over C-style arrays",
              "Use nullptr instead of NULL",
              "Implement proper exception handling",
              "Use auto keyword when type is obvious",
              "Follow the Rule of Three/Five/Zero",
              "Use std::string instead of char arrays",
              "Prefer algorithms from <algorithm> over manual loops",
              "Use proper header guards or #pragma once"
            ],
            "c": [
              "Use meaningful variable and function names",
              "Check return values of all functions",
              "Free all allocated memory to prevent memory leaks",
              "Use const keyword for read-only parameters",
              "Initialize all variables before use",
              "Use static keyword for internal linkage",
              "Implement proper error handling",
              "Use header guards in header files",
              "Follow consistent indentation and formatting",
              "Avoid global variables when possible",
              "Use sizeof() operator for array sizes",
              "Check for null pointers before dereferencing",
              "Use standard library functions when available",
              "Follow MISRA C guidelines for safety-critical code"
            ]
          },
          "description": "Comprehensive best practices for multiple programming languages",
          "scope": "resource"
        },
        "yacor.severity": {
          "type": "string",
          "enum": ["error", "warning", "info"],
          "default": "warning",
          "description": "Default severity level for best practice violations",
          "scope": "resource"
        },
        "yacor.crossFileAnalysis": {
          "type": "boolean",
          "default": true,
          "description": "üîó Enable cross-file analysis to detect issues spanning multiple files (imports, naming conflicts, etc.)",
          "scope": "resource"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./"
  },
  "devDependencies": {
    "@types/vscode": "^1.74.0",
    "@types/node": "16.x",
    "typescript": "^4.9.4"
  },
  "dependencies": {
    "gigachat-node": "^2.4.5"
  }
}
